{
  port = ${?PORT}
  url = ${?PLATFORM_URL}

  # Centralized database configuration
  # Read service connects to REPLICA with secondary read preference

  henDB = {
    type = "mongo"
    uri = ${?MONGO_URI}
    db = ${?PREFIX}_${?ENV}
    collection = ${?PREFIX}-${?ENV}-hen
    options {
      directConnection = false
      replicaSet = "rs0"
      readPreference = "secondary"
    }
  }

  coopDB = {
    type = "mongo"
    uri = ${?MONGO_URI}
    db = ${?PREFIX}_${?ENV}
    collection = ${?PREFIX}-${?ENV}-coop
    options {
      directConnection = false
      replicaSet = "rs0"
      readPreference = "secondary"
    }
  }

  farmDB = {
    type = "mongo"
    uri = ${?MONGO_URI}
    db = ${?PREFIX}_${?ENV}
    collection = ${?PREFIX}-${?ENV}-farm
    options {
      directConnection = false
      replicaSet = "rs0"
      readPreference = "secondary"
    }
  }

  # No REST endpoints on read service
  restlettes = []

  # READ SERVICE: GraphQL endpoints only (Queries)
  # All reads come from MongoDB replica
  graphlettes = [
    {
      path = "/farm/graph"
      storage = ${farmDB}
      schema = include file(graph/farm.graphql)
      rootConfig {
        singletons = [
          {
            name = "getById"
            query = "{\"id\": \"{{id}}\"}"
          }
        ]
        vectors = []
        resolvers = [
          {
            name = "coops"
            queryName = "getByFarm"
            url = "http://read-service:"${port}"/coop/graph"
          }
        ]
      }
    },
    {
      path = "/coop/graph"
      storage = ${coopDB}
      schema = include file(./graph/coop.graphql)
      rootConfig {
        singletons = [
          {
            name = "getByName"
            id = "name"
            query = "{\"payload.name\": \"{{id}}\"}"
          },
          {
            name = "getById"
            query = "{\"id\": \"{{id}}\"}"
          }
        ]
        vectors = [
          {
            name = "getByFarm"
            query = "{\"payload.farm_id\": \"{{id}}\"}"
          }
        ]
        resolvers = [
          {
            name = "farm"
            id = "farm_id"
            queryName = "getById"
            url = "http://read-service:"${?PORT}"/farm/graph"
          },
          {
            name = "hens"
            queryName = "getByCoop"
            url = "http://read-service:"${?PORT}"/hen/graph"
          }
        ]
      }
    },
     {
      path = "/hen/graph"
      storage = ${henDB}
      schema = include file(./graph/hen.graphql)
      rootConfig {
        singletons = [
          {
            name = "getById"
            query = "{\"id\": \"{{id}}\"}"
          }
        ]
        vectors = [
          {
            name = "getByName"
            query = "{\"payload.name\": \"{{name}}\"}"
          },
          {
            name = "getByCoop"
            query = "{\"payload.coop_id\": \"{{id}}\"}"
          }
        ]
        resolvers = [
          {
            name = "coop"
            id = "coop_id"
            queryName = "getById"
            url = "http://read-service:"${?PORT}"/coop/graph"
          }
        ]
      }
    }
  ]
}
