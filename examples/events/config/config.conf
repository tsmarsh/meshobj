{
  "graphlettes": [
    {
      "path": "/event/graph",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-event",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
        }
      },
      "schema": "scalar Date\n\ntype Query {\n  getByName(name: String, at: Float): [Event]\n  getById(id: ID, at: Float): Event\n}\n\ntype Event {\n  name: String!\n  data: String!\n  source: String\n  version: String\n  timestamp: DateTime!\n  processedEvent: [ProcessedEvent]\n  id: ID\n  processedEvents: [ProcessedEvent]\n}\n\ntype ProcessedEvent {\n  id: ID!\n  raw_event: String!\n  name: String!\n  processed_data: String!\n  processed_timestamp: DateTime!\n  processing_time_ms: Float\n  status: ProcessingStatus!\n  error_message: String\n  id: ID\n}",
      "rootConfig": {
        "singletons": [],
        "vectors": [],
        "resolvers": []
      }
    },
    {
      "path": "/processedevent/graph",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-processedevent",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
        }
      },
      "schema": "scalar Date\n\ntype Event {\n  name: String!\n  data: String!\n  source: String\n  version: String\n  timestamp: DateTime!\n  id: ID\n}\n\ntype Query {\n  getByName(name: String, at: Float): [ProcessedEvent]\n  getById(id: ID, at: Float): ProcessedEvent\n  getByEvent(id: ID, at: Float): [ProcessedEvent]\n}\n\ntype ProcessedEvent {\n  id: ID!\n  raw_event: String!\n  name: String!\n  processed_data: String!\n  processed_timestamp: DateTime!\n  processing_time_ms: Float\n  status: ProcessingStatus!\n  error_message: String\n  id: ID\n}",
      "rootConfig": {
        "singletons": [],
        "vectors": [],
        "resolvers": []
      }
    }
  ],
  "port": 3033,
  "restlettes": [
    {
      "path": "/event/api",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-event",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
        }
      },
      "schema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "data",
          "timestamp"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "timestamp": {
            "type": "datetime"
          },
          "processedEvent": {
            "type": "array",
            "items": {
              "type": "processedevent"
            }
          }
        }
      }
    },
    {
      "path": "/processedevent/api",
      "storage": {
        "type": "mongo",
        "uri": ${?MONGO_URI},
        "collection": ${?PREFIX}"-"${?ENV}"-processedevent",
        "db": ${?PREFIX}"_"${?ENV},
        "options": {
        }
      },
      "schema": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "raw_event_id",
          "name",
          "processed_data",
          "processed_timestamp",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "raw_event_id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "processed_data": {
            "type": "string"
          },
          "processed_timestamp": {
            "type": "datetime"
          },
          "processing_time_ms": {
            "type": "number"
          },
          "status": {
            "type": "processingstatus"
          },
          "error_message": {
            "type": "string"
          }
        }
      }
    }
  ]
}