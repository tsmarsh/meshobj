<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Event Flow E2E Latency">
      <stringProp name="TestPlan.comments">HTTP → Mongo → Debezium → Topic A → Consumer → Service B → Mongo → Debezium → Topic B. Measure t0→A, A→B, t0→B using DI-Kafka.</stringProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="bootstrap.servers" elementType="Argument">
            <stringProp name="Argument.name">bootstrap.servers</stringProp>
            <stringProp name="Argument.value">localhost:9092</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="topic.raw" elementType="Argument">
            <stringProp name="Argument.name">topic.raw</stringProp>
            <stringProp name="Argument.value">events.events_development.event</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="topic.processed" elementType="Argument">
            <stringProp name="Argument.name">topic.processed</stringProp>
            <stringProp name="Argument.value">events.events_development.processedevent</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="service.host" elementType="Argument">
            <stringProp name="Argument.name">service.host</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="service.port" elementType="Argument">
            <stringProp name="Argument.name">service.port</stringProp>
            <stringProp name="Argument.value">4055</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="service.path" elementType="Argument">
            <stringProp name="Argument.name">service.path</stringProp>
            <stringProp name="Argument.value">/event/api</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maxWaitMs" elementType="Argument">
            <stringProp name="Argument.name">maxWaitMs</stringProp>
            <stringProp name="Argument.value">15000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Event Flow E2E">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">10</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Init Correlation &amp; t0" enabled="true">
          <stringProp name="scriptLanguage">beanshell</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">
            import java.util.UUID;
            String id = UUID.randomUUID().toString();
            vars.put(&quot;correlationId&quot;, id);
            vars.put(&quot;t0&quot;, String.valueOf(System.currentTimeMillis()));
            // clear any prior values
            vars.remove(&quot;tA&quot;); vars.remove(&quot;tB&quot;); vars.remove(&quot;timeoutA&quot;); vars.remove(&quot;timeoutB&quot;);
            vars.remove(&quot;startWaitA&quot;); vars.remove(&quot;startWaitB&quot;);
          </stringProp>
          <stringProp name="cacheKey">false</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <com.di.jmeter.kafka.config.KafkaConsumerConfig guiclass="TestBeanGUI" testclass="com.di.jmeter.kafka.config.KafkaConsumerConfig" testname="Consumer A Config (raw)" enabled="true">
          <boolProp name="autoCommit">false</boolProp>
          <stringProp name="deSerializerKey">org.apache.kafka.common.serialization.StringDeserializer</stringProp>
          <stringProp name="deSerializerValue">org.apache.kafka.common.serialization.StringDeserializer</stringProp>
          <collectionProp name="extraConfigs"/>
          <stringProp name="groupId">jmeter-A-${__UUID()}</stringProp>
          <stringProp name="kafkaBrokers">${bootstrap.servers}</stringProp>
          <stringProp name="kafkaConsumerClientVariableName">cA</stringProp>
          <stringProp name="kafkaSslKeystore"></stringProp>
          <stringProp name="kafkaSslKeystorePassword"></stringProp>
          <stringProp name="kafkaSslPrivateKeyPass"></stringProp>
          <stringProp name="kafkaSslTruststore"></stringProp>
          <stringProp name="kafkaSslTruststorePassword"></stringProp>
          <stringProp name="numberOfMsgToPoll">50</stringProp>
          <stringProp name="securityType">securityType.plaintext</stringProp>
          <stringProp name="topic">${topic.raw}</stringProp>
        </com.di.jmeter.kafka.config.KafkaConsumerConfig>
        <hashTree/>
        <com.di.jmeter.kafka.config.KafkaConsumerConfig guiclass="TestBeanGUI" testclass="com.di.jmeter.kafka.config.KafkaConsumerConfig" testname="Consumer B Config (processed)" enabled="true">
          <boolProp name="autoCommit">false</boolProp>
          <stringProp name="deSerializerKey">org.apache.kafka.common.serialization.StringDeserializer</stringProp>
          <stringProp name="deSerializerValue">org.apache.kafka.common.serialization.StringDeserializer</stringProp>
          <collectionProp name="extraConfigs"/>
          <stringProp name="groupId">jmeter-B-${__UUID()}</stringProp>
          <stringProp name="kafkaBrokers">${bootstrap.servers}</stringProp>
          <stringProp name="kafkaConsumerClientVariableName">cB</stringProp>
          <stringProp name="kafkaSslKeystore"></stringProp>
          <stringProp name="kafkaSslKeystorePassword"></stringProp>
          <stringProp name="kafkaSslPrivateKeyPass"></stringProp>
          <stringProp name="kafkaSslTruststore"></stringProp>
          <stringProp name="kafkaSslTruststorePassword"></stringProp>
          <stringProp name="numberOfMsgToPoll">50</stringProp>
          <stringProp name="securityType">securityType.plaintext</stringProp>
          <stringProp name="topic">${topic.processed}</stringProp>
        </com.di.jmeter.kafka.config.KafkaConsumerConfig>
        <hashTree/>
        <com.di.jmeter.kafka.sampler.KafkaConsumerSampler guiclass="TestBeanGUI" testclass="com.di.jmeter.kafka.sampler.KafkaConsumerSampler" testname="Prime A" enabled="true">
          <stringProp name="commitType">None</stringProp>
          <stringProp name="kafkaConsumerClientVariableName">cA</stringProp>
          <stringProp name="pollTimeout">1</stringProp>
        </com.di.jmeter.kafka.sampler.KafkaConsumerSampler>
        <hashTree/>
        <com.di.jmeter.kafka.sampler.KafkaConsumerSampler guiclass="TestBeanGUI" testclass="com.di.jmeter.kafka.sampler.KafkaConsumerSampler" testname="Prime B" enabled="true">
          <stringProp name="commitType">None</stringProp>
          <stringProp name="kafkaConsumerClientVariableName">cB</stringProp>
          <stringProp name="pollTimeout">1</stringProp>
        </com.di.jmeter.kafka.sampler.KafkaConsumerSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Event" enabled="true">
          <stringProp name="HTTPSampler.domain">${service.host}</stringProp>
          <stringProp name="HTTPSampler.port">${service.port}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">${service.path}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;perf_test_event_${__threadNum}_${__counter(TRUE,)}&quot;,&#xd;
  &quot;correlationId&quot;: &quot;${correlationId}&quot;,&#xd;
  &quot;data&quot;: {&quot;test&quot;:true,&quot;thread&quot;:${__threadNum},&quot;timestamp&quot;:${__time()}} ,&#xd;
  &quot;timestamp&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;,)}&quot;,&#xd;
  &quot;source&quot;: &quot;jmeter_perf_test&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Correlation-Id</stringProp>
                <stringProp name="Header.value">${correlationId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait for A" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(vars.get(&quot;tA&quot;) == null)}</stringProp>
        </WhileController>
        <hashTree>
          <com.di.jmeter.kafka.sampler.KafkaConsumerSampler guiclass="TestBeanGUI" testclass="com.di.jmeter.kafka.sampler.KafkaConsumerSampler" testname="Poll A" enabled="true">
            <stringProp name="commitType">None</stringProp>
            <stringProp name="kafkaConsumerClientVariableName">cA</stringProp>
            <stringProp name="pollTimeout">200</stringProp>
          </com.di.jmeter.kafka.sampler.KafkaConsumerSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Scan A for correlationId" enabled="true">
              <stringProp name="scriptLanguage">beanshell</stringProp>
              <stringProp name="script">
                long now = System.currentTimeMillis();
                String id = vars.get(&quot;correlationId&quot;);
                String txt = prev.getResponseDataAsString();
                if (txt != null &amp;&amp; txt.contains(id)) {
                  vars.put(&quot;tA&quot;, String.valueOf(now));
                } else {
                  String start = vars.get(&quot;startWaitA&quot;);
                  if (start == null) {
                    vars.put(&quot;startWaitA&quot;, String.valueOf(now));
                  } else {
                    long waited = now - Long.parseLong(start);
                    long maxW = Long.parseLong(vars.get(&quot;maxWaitMs&quot;));
                    if (waited &gt; maxW) {
                      // Timeout: mark and break loop by setting tA
                      vars.put(&quot;tA&quot;, String.valueOf(now));
                      vars.put(&quot;timeoutA&quot;, &quot;true&quot;);
                    }
                  }
                }
              </stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Pause A" enabled="true">
              <stringProp name="ConstantTimer.delay">75</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait for B" enabled="true">
          <stringProp name="WhileController.condition">${__BeanShell(vars.get(&quot;tB&quot;) == null)}</stringProp>
        </WhileController>
        <hashTree>
          <com.di.jmeter.kafka.sampler.KafkaConsumerSampler guiclass="TestBeanGUI" testclass="com.di.jmeter.kafka.sampler.KafkaConsumerSampler" testname="Poll B" enabled="true">
            <stringProp name="commitType">None</stringProp>
            <stringProp name="kafkaConsumerClientVariableName">cB</stringProp>
            <stringProp name="pollTimeout">200</stringProp>
          </com.di.jmeter.kafka.sampler.KafkaConsumerSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Scan B for correlationId" enabled="true">
              <stringProp name="scriptLanguage">beanshell</stringProp>
              <stringProp name="script">
                long now = System.currentTimeMillis();
                String id = vars.get(&quot;correlationId&quot;);
                String txt = prev.getResponseDataAsString();
                if (txt != null &amp;&amp; txt.contains(id)) {
                  vars.put(&quot;tB&quot;, String.valueOf(now));
                } else {
                  String start = vars.get(&quot;startWaitB&quot;);
                  if (start == null) {
                    vars.put(&quot;startWaitB&quot;, String.valueOf(now));
                  } else {
                    long waited = now - Long.parseLong(start);
                    long maxW = Long.parseLong(vars.get(&quot;maxWaitMs&quot;));
                    if (waited &gt; maxW) {
                      vars.put(&quot;tB&quot;, String.valueOf(now));
                      vars.put(&quot;timeoutB&quot;, &quot;true&quot;);
                    }
                  }
                }
              </stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Pause B" enabled="true">
              <stringProp name="ConstantTimer.delay">75</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Compute Latencies" enabled="true">
          <stringProp name="scriptLanguage">beanshell</stringProp>
          <stringProp name="script">
            long t0 = Long.parseLong(vars.get(&quot;t0&quot;));
            long tA = Long.parseLong(vars.get(&quot;tA&quot;));
            long tB = Long.parseLong(vars.get(&quot;tB&quot;));
            long l_http_to_A = tA - t0;
            long l_A_to_B    = tB - tA;
            long l_http_to_B = tB - t0;
            vars.put(&quot;lat_http_to_A&quot;, String.valueOf(l_http_to_A));
            vars.put(&quot;lat_A_to_B&quot;,    String.valueOf(l_A_to_B));
            vars.put(&quot;lat_http_to_B&quot;, String.valueOf(l_http_to_B));
            boolean toA = &quot;true&quot;.equals(vars.get(&quot;timeoutA&quot;));
            boolean toB = &quot;true&quot;.equals(vars.get(&quot;timeoutB&quot;));
            String status = toA || toB ? &quot;TIMEOUT&quot; : &quot;OK&quot;;
            SampleResult.setSampleLabel(&quot;latencies&quot;);
            SampleResult.setSuccessful(!(toA || toB));
            String msg = &quot;status=&quot; + status + &quot; corr=&quot; + vars.get(&quot;correlationId&quot;) + &quot; A=&quot; + l_http_to_A + &quot;ms A→B=&quot; + l_A_to_B + &quot;ms B=&quot; + l_http_to_B + &quot;ms&quot;;
            SampleResult.setResponseMessage(msg);
            SampleResult.setResponseData(msg.getBytes(&quot;UTF-8&quot;));
          </stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="CSV Writer" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
